#!/bin/bash
# ---------------- SLURM parameters ----------------
#SBATCH -p all.q
#SBATCH --ntasks 1                 # total logical cores you requested
#SBATCH --mem-per-cpu=1G
#SBATCH --cpus-per-task=15
#SBATCH -N 1
#SBATCH --mail-type=ALL
#SBATCH -J HAMNucRetSeq_pipeline
#SBATCH -D /home/pol_schiessel/maya620d/HAMNucRetSeq_pipeline
#SBATCH --output=/home/pol_schiessel/maya620d/HAMNucRetSeq_pipeline/log/Array_eukaryote.%A_%a.out
#SBATCH --error=/home/pol_schiessel/maya620d/HAMNucRetSeq_pipeline/log/Array_eukaryote.%A_%a.error
#SBATCH -A undefined
#SBATCH --exclude=compute-0-[13-15] ###Polars does not work on these nodes

# ---------------- Load modules --------------------
module load apps/singularity

# ---------------- Runtime setup -------------------
echo "SLURM job $SLURM_JOB_ID - array task $SLURM_ARRAY_TASK_ID"
echo "Running on $(hostname -s)   ($(lscpu | grep 'Model name' | sed 's/^.*: //'))"


# ----------------- HOMO EADS PARAMETER----------------
eads_homo_adsorption=16.32





# ----------------NONHOMO EADS EXTRACTION PARAMETERS------------------------
NUC_METHOD="crystal"
FREEDNA_METHOD="md"
E_OFFSET=11.5

if [ -z "${FREEDNA_METHOD:-}" ]; then
    extra_arg=""
    FDNA="None"
else
    extra_arg="--freedna_method $FREEDNA_METHOD"
    FDNA="$FREEDNA_METHOD"
fi

#-----------------DIRECTORIES-------------------------------
# MAIN_DIR="/group/pol_schiessel/Manish/HAMNucRetSeq_pipeline/output/minpoint_unboundpromoter_regions_breath"
MAIN_DIR="/group/pol_schiessel/Manish/HAMNucRetSeq_pipeline/output/exactpoint_boundpromoter_regions_breath"


INPUT_DIR="$MAIN_DIR/dF"

if [ ! -d "$INPUT_DIR" ]; then
    echo "ERROR: Input directory $INPUT_DIR does not exist!"
    exit 1
fi

OUTPUT_DIR="$MAIN_DIR/breath_summary"
OUTPUT_ENERGY_DIR="$MAIN_DIR/breath_energy"
mkdir -p "$OUTPUT_DIR"
mkdir -p "$OUTPUT_ENERGY_DIR"

#-----------------SLURM ARRAY JOB SETUP--------------------

TASK_ID_PADDED=$(printf "%03d" $SLURM_ARRAY_TASK_ID)

input_file="$INPUT_DIR/$TASK_ID_PADDED.tsv"
out_file="$OUTPUT_DIR/$TASK_ID_PADDED.tsv"
outfile_energy="$OUTPUT_ENERGY_DIR/$TASK_ID_PADDED.tsv"
id_lookup_file="$INPUT_DIR/id_lookup.tsv"

if [ ! -f "$id_lookup_file" ]; then
    echo "ERROR: ID lookup file $id_lookup_file does not exist!"
    exit 1
fi


echo "Processing array job $SLURM_ARRAY_TASK_ID"
echo "Using input file: $input_file"
echo "Using ID lookup file: $id_lookup_file"
echo "Output will be saved to: $out_file"

# Check if input file exists
if [ ! -f "$input_file" ]; then
    echo "ERROR: Input file $input_file not found!"
    exit 1
fi

###-----------------RUN THE COMPUTATION -----------------------------------

# echo "-> Launching main worker script....."
# singularity exec \
#     --bind $PWD:/project \
#     hamnucret.sif \
#     python3 /project/src/analysis/prom_breath_prob.py \
#         --input_file "$input_file" \
#         --id_lookup_path "$id_lookup_file" \
#         --outfile "$out_file" \
#         --outfile_energy "$outfile_energy" \
#         --eads_param_nucmethod "$NUC_METHOD" \
#         --eads_param_freednamethod "$FDNA" \
#         --eads_param_krescfactor 1.0 \
#         --eads_param_Eoffset "$E_OFFSET"


echo "-> Launching main worker script....."
singularity exec \
    --bind $PWD:/project \
    hamnucret.sif \
    python3 /project/src/analysis/prom_breath_prob.py \
        --input_file "$input_file" \
        --id_lookup_path "$id_lookup_file" \
        --outfile "$out_file" \
        --outfile_energy "$outfile_energy" \
        --eads_homo_adsorption "$eads_homo_adsorption"
singularity_exit=$?

# only proceed to sort if singularity succeeded and both files exist
if [ $singularity_exit -eq 0 ]; then
  if [ -f "$out_file" ] && [ -f "$outfile_energy" ]; then
    for f in "$out_file" "$outfile_energy"; do
      sorted="${f}.sorted"
      (
        head -n 1 "$f"
        tail -n +2 "$f" | LC_ALL=C sort -t$'\t' -S 50% --parallel="$SLURM_CPUS_PER_TASK" -k4,4 -k5,5n -k7,7n -k6,6n
      ) > "$sorted" && mv "$sorted" "$f"
    echo "[+] Sorted $f"
    done
  else
    echo "WARNING: Output files missing; skipping sort."
  fi
else
  echo "ERROR: singularity command failed (exit code $singularity_exit)"
  exit $singularity_exit
fi


echo "Free-energy calculation finished - results in ${OUTPUT_DIR}/${TASK_ID_PADDED}.tsv"
